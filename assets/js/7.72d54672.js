(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{317:function(a,n,r){a.exports=r.p+"assets/img/other_yarn_1.08f181b6.png"},318:function(a,n,r){a.exports=r.p+"assets/img/other_yarn_2.2ee71497.png"},344:function(a,n,r){"use strict";r.r(n);var t=r(38),s=Object(t.a)({},function(){var a=this,n=a.$createElement,t=a._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h3",{attrs:{id:"什么是yarn"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是yarn","aria-hidden":"true"}},[a._v("#")]),a._v(" 什么是Yarn")]),a._v(" "),t("p",[a._v("Facebook、Google、Exponent 和 Tilde 联合推出了一个新的 JS 包管理工具 — Yarn，正如官方文档中写的，Yarn 是为了弥补 npm 的一些缺陷而出现的")]),a._v(" "),t("h3",{attrs:{id:"npm-的缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#npm-的缺点","aria-hidden":"true"}},[a._v("#")]),a._v(" npm 的缺点")]),a._v(" "),t("ul",[t("li",[a._v("npm install的时候巨慢。特别是新的项目拉下来要等半天，删除node_modules，重新install的时候依旧如此。")]),a._v(" "),t("li",[a._v("同一个项目，安装的时候无法保持一致性。由于package.json文件中版本号的特点，下面三个版本号在安装的时候代表不同的含义。\n如：")])]),a._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"5.0.3"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"~5.0.3"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"^5.0.3"')]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("p",[a._v("其中“5.0.3”表示安装指定的5.0.3版本，“～5.0.3”表示安装5.0.X中最新的版本，“^5.0.3”表示安装5.X.X中最新的版本。这就麻烦了，常常会出现同一个项目，有的同事是OK的，有的同事会由于安装的版本不一致出现bug。")]),a._v(" "),t("ul",[t("li",[a._v("安装的时候，包会在同一时间下载和安装，中途某个时候，一个包抛出了一个错误，但是npm会继续下载和安装包。因为npm会把所有的日志输出到终端，有关错误包的错误信息就会在一大堆npm打印的警告中丢失掉，并且你甚至永远不会注意到实际发生的错误。")])]),a._v(" "),t("h3",{attrs:{id:"yarn的优点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#yarn的优点","aria-hidden":"true"}},[a._v("#")]),a._v(" Yarn的优点")]),a._v(" "),t("ul",[t("li",[a._v("速度快 。速度快主要来自以下两个方面：")])]),a._v(" "),t("ol",[t("li",[t("p",[a._v("并行安装：无论 npm 还是 Yarn 在执行包的安装时，都会执行一系列任务。npm 是按照队列执行每个 package，也就是说必须要等到当前 package 安装完成之后，才能继续后面的安装。而 Yarn 是同步执行所有任务，提高了性能。")])]),a._v(" "),t("li",[t("p",[a._v("离线模式：如果之前已经安装过一个软件包，用Yarn再次安装时之间从缓存中获取，就不用像npm那样再从网络下载了。")])])]),a._v(" "),t("ul",[t("li",[t("p",[a._v("安装版本统一：为了防止拉取到不同的版本，Yarn 有一个锁定文件 (lock file) 记录了被确切安装上的模块的版本号。每次只要新增了一个模块，Yarn 就会创建（或更新）yarn.lock 这个文件。这么做就保证了，每一次拉取同一个项目依赖时，使用的都是一样的模块版本。\n有了yarn的压力之后，npm做了一些类似的改进。默认新增了类似yarn.lock的 package-lock.json；npm5.0之前是没有的")])]),a._v(" "),t("li",[t("p",[a._v("更简洁的输出：npm 的输出信息比较冗长。在执行 npm install  的时候，命令行里会不断地打印出所有被安装上的依赖。相比之下，Yarn 简洁太多：默认情况下，结合了 emoji直观且直接地打印出必要的信息，也提供了一些命令供开发者查询额外的安装信息。")])]),a._v(" "),t("li",[t("p",[a._v("更好的语义化： yarn改变了一些npm命令的名称，比如 yarn add/remove，感觉上比 npm 原本的 install/uninstall 要更清晰")])]),a._v(" "),t("li",[t("p",[a._v("同项目npm和yarn加载对比")])])]),a._v(" "),t("p",[a._v("npm\n"),t("img",{attrs:{src:r(317),alt:"Mou icon"}})]),a._v(" "),t("p",[a._v("yarn\n"),t("img",{attrs:{src:r(318),alt:"Mou icon"}})]),a._v(" "),t("h4",{attrs:{id:"yarn和npm命令对比"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#yarn和npm命令对比","aria-hidden":"true"}},[a._v("#")]),a._v(" Yarn和npm命令对比")]),a._v(" "),t("p",[a._v("npm ######## yarn")]),a._v(" "),t("p",[a._v("npm install ######## yarn")]),a._v(" "),t("p",[a._v("npm install react --save ######## yarn add react")]),a._v(" "),t("p",[a._v("npm uninstall react --save ######## yarn remove react")]),a._v(" "),t("p",[a._v("npm install react --save-dev ######## yarn add react --dev")]),a._v(" "),t("p",[a._v("npm update --save ######## yarn upgrade")])])},[],!1,null,null,null);n.default=s.exports}}]);