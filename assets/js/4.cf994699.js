(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{324:function(t,s,a){t.exports=a.p+"assets/img/vue_vite_web.67be490e.png"},325:function(t,s,a){t.exports=a.p+"assets/img/vue_webpack.5200f5f7.png"},326:function(t,s,a){t.exports=a.p+"assets/img/vue_vite_3.7970203b.png"},327:function(t,s,a){t.exports=a.p+"assets/img/vue_vite_1.3306688c.png"},328:function(t,s,a){t.exports=a.p+"assets/img/vue_vite_2.f8aeb38f.png"},329:function(t,s,a){t.exports=a.p+"assets/img/vue_vite_4.aa572e08.png"},334:function(t,s,a){"use strict";a.r(s);var e=a(38),n=Object(e.a)({},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("Vite（法语意思是 “快”，发音为 /vit/，类似 veet）是一种全新的前端构建工具。你可以把它理解为一个开箱即用的开发服务器 + 打包工具的组合，但是更轻更快。")]),t._v(" "),e("p",[t._v("在浏览器支持 ES 模块之前，开发者没有以模块化的方式开发 JavaScript 的原生机制。这也是 “打包” 这个概念出现的原因：使用工具抓取、处理和链接我们的源码模块到文件中，使其可以运行在浏览器中。")]),t._v(" "),e("p",[t._v("时过境迁，我们见证了许多诸如 webpack、Rollup 和 Gulp 等工具的诞生，这些工具极大地改善了前端开发者的开发体验。")]),t._v(" "),e("p",[t._v("然而，当我们开始构建越来越大型的应用时，需要处理的 JavaScript 代码量也呈指数级增长。大型项目包含数千个模块的情况并不少见。我们开始遇到性能瓶颈 —— 使用 JavaScript 开发的工具通常需要很长时间（甚至是几分钟！）才能启动开发服务器，即使使用 HMR，文件修改后的效果也需要几秒钟才能在浏览器中反映出来。如此循环往复，迟钝的反馈会极大地影响开发者的开发效率和幸福感。")]),t._v(" "),e("p",[t._v("Vite 旨在利用生态系统中的新进展解决上述问题：浏览器开始原生支持 ES 模块，越来越多 JavaScript 工具使用编译型语言编写。")]),t._v(" "),e("p",[e("code",[t._v("ES Modules 是浏览器支持的一种模块化方案，允许在代码中实现模块化")])]),t._v(" "),e("h3",{attrs:{id:"特点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#特点","aria-hidden":"true"}},[t._v("#")]),t._v(" 特点")]),t._v(" "),e("p",[t._v("Lightning fast cold server start  - 闪电般的冷启动速度")]),t._v(" "),e("p",[t._v("Instant hot module replacement (HMR) - 即时热模块更换（热更新）")]),t._v(" "),e("p",[t._v("True on-demand compilation - 真正的按需编译")]),t._v(" "),e("p",[t._v("一个是 Vite 主要对应的场景是开发模式，原理是拦截浏览器发出的 ES imports 请求并做相应处理。（生产模式是用 rollup 打包）\n一个是 Vite 在开发模式下不需要打包，只需要编译浏览器发出的 HTTP 请求对应的文件即可，所以热更新速度很快。")]),t._v(" "),e("p",[t._v("因此，要实现上述目标，需要要求项目里只使用原生 ES imports，如果使用了 require 将失效")]),t._v(" "),e("h3",{attrs:{id:"缓慢的服务器启动"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#缓慢的服务器启动","aria-hidden":"true"}},[t._v("#")]),t._v(" 缓慢的服务器启动")]),t._v(" "),e("p",[t._v("当冷启动开发服务器时，基于打包器的方式是在提供服务前去急切地抓取和构建你的整个应用。")]),t._v(" "),e("p",[t._v("Vite 通过在一开始将应用中的模块区分为 依赖 和 源码 两类，改进了开发服务器启动时间。")]),t._v(" "),e("p",[t._v("依赖 大多为纯 JavaScript 并在开发时不会变动。一些较大的依赖（例如有上百个模块的组件库）处理的代价也很高。依赖也通常会以某些方式（例如 ESM 或者 CommonJS）被拆分到大量小模块中。")]),t._v(" "),e("p",[t._v("Vite 将会使用 esbuild 预构建依赖。Esbuild 使用 Go 编写，并且比以 JavaScript 编写的打包器预构建依赖快 10-100 倍。")]),t._v(" "),e("p",[t._v("源码 通常包含一些并非直接是 JavaScript 的文件，需要转换（例如 JSX，CSS 或者 Vue/Svelte 组件），时常会被编辑。同时，并不是所有的源码都需要同时被加载。（例如基于路由拆分的代码模块）。")]),t._v(" "),e("p",[t._v("Vite 以 原生 ESM 方式服务源码。这实际上是让浏览器接管了打包程序的部分工作：Vite 只需要在浏览器请求源码时进行转换并按需提供源码。根据情景动态导入的代码，即只在当前屏幕上实际使用时才会被处理。")]),t._v(" "),e("h3",{attrs:{id:"缓慢的更新"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#缓慢的更新","aria-hidden":"true"}},[t._v("#")]),t._v(" 缓慢的更新")]),t._v(" "),e("p",[t._v("当基于打包器启动时，编辑文件后将重新构建文件本身。显然我们不应该重新构建整个包，因为这样更新速度会随着应用体积增长而直线下降。")]),t._v(" "),e("p",[t._v("一些打包器的开发服务器将构建内容存入内存，这样它们只需要在文件更改时使模块图的一部分失活[1]，但它也仍需要整个重新构建并重载页面。这样代价很高，并且重新加载页面会消除应用的当前状态，所以打包器支持了动态模块热重载（HMR）：允许一个模块 “热替换” 它自己，而对页面其余部分没有影响。这大大改进了开发体验 - 然而，在实践中我们发现，即使是 HMR 更新速度也会随着应用规模的增长而显著下降。")]),t._v(" "),e("p",[t._v("在 Vite 中，HMR 是在原生 ESM 上执行的。当编辑一个文件时，Vite 只需要精确地使已编辑的模块与其最近的 HMR 边界之间的链失效（大多数时候只需要模块本身），使 HMR 更新始终快速，无论应用的大小。")]),t._v(" "),e("p",[t._v("Vite 同时利用 HTTP 头来加速整个页面的重新加载（再次让浏览器为我们做更多事情）：源码模块的请求会根据 304 Not Modified 进行协商缓存，而依赖模块请求则会通过 Cache-Control: max-age=31536000,immutable 进行强缓存，因此一旦被缓存它们将不需要再次请求。")]),t._v(" "),e("h3",{attrs:{id:"浏览器兼容性："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器兼容性：","aria-hidden":"true"}},[t._v("#")]),t._v(" 浏览器兼容性：")]),t._v(" "),e("p",[e("img",{attrs:{src:a(324),alt:""}})]),t._v(" "),e("h3",{attrs:{id:"webpack-vite-原理对比"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#webpack-vite-原理对比","aria-hidden":"true"}},[t._v("#")]),t._v(" Webpack & Vite 原理对比")]),t._v(" "),e("p",[t._v("webpack 打包时, 经常会因为一小行代码改动，就需要耗时数秒甚至十几秒进行重新打包；这是因为 webpack 需要将所有模块打包成一个一个或者多个模块\n"),e("img",{attrs:{src:a(325),alt:""}})]),t._v(" "),e("p",[t._v("如下面的代码为例，当我们使用如 webpack 类的打包工具时。最终会将所有的代码打包入一个 bundle.js 文件中")]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a.js ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// b.js ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" b "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// main.js ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" a "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a.js'")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" b "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b.js'")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("calculate")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// bundle.js")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" b "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("calculate")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" calculate "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br"),e("span",{staticClass:"line-number"},[t._v("19")]),e("br"),e("span",{staticClass:"line-number"},[t._v("20")]),e("br")])]),e("p",[t._v("Webpack 的热更新原理简单来说就是，一旦发生某个依赖（比如上面的 a.js ）改变，就将这个依赖所处的 module 的更新，并将新的 module 发送给浏览器重新执行。由于我们只打了一个 bundle.js，所以热更新的话也会重新打这个 bundle.js。试想如果依赖越来越多，就算只修改一个文件，理论上热更新的速度也会越来越慢。")]),t._v(" "),e("p",[t._v("用vite编译的话，最终产出的依然是 "),e("code",[t._v("a.js、b.js、c.js")]),t._v(" 三个文件，只有编译耗时。由于入口是 "),e("code",[t._v("c.js")]),t._v("，浏览器解析到 "),e("code",[t._v("import { a } from './a'")]),t._v(" 时，会发起 HTTP 请求 a.js （b 同理），就算不用打包，也可以加载到所需要的代码，因此省去了合并代码的时间。\n在热更新的时候，如果 a 发生了改变，只需要更新 a 以及用到 a 的 c。由于 b 没有发生改变，所以 Vite 无需重新编译 b，可以从缓存中直接拿编译的结果。这样一来，修改一个文件 a，只会重新编译这个文件 a 以及浏览器当前用到这个文件 a 的文件，而其余文件都无需重新编译。所以理论上热更新的速度不会随着文件增加而变慢。")]),t._v(" "),e("p",[e("code",[t._v("缺点： 初始化的时候如果浏览器请求的模块过多，也会带来初始化的性能问题。（热更新的速度会弥补）")])]),t._v(" "),e("p",[e("img",{attrs:{src:a(326),alt:""}})]),t._v(" "),e("p",[t._v("Webpack 之所以慢，是因为 Webpack 会将许多资源构成一个或者多个 bundle 。如果我们跳过打包的过程，当需要某个模块时再通过请求去获取是不是能完美解决这个问题呢？\n"),e("img",{attrs:{src:a(327),alt:""}})]),t._v(" "),e("h2",{attrs:{id:"vite-实现"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vite-实现","aria-hidden":"true"}},[t._v("#")]),t._v(" Vite 实现")]),t._v(" "),e("h3",{attrs:{id:"请求拦截原理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#请求拦截原理","aria-hidden":"true"}},[t._v("#")]),t._v(" 请求拦截原理")]),t._v(" "),e("p",[t._v("Vite 的基本实现原理，就是启动一个 koa 服务器拦截浏览器请求ES Module的请求。通过 path 找到目录下对应的文件做一定的处理最终以 ES Modules 格式返回给客户端\n"),e("img",{attrs:{src:a(328),alt:""}})]),t._v(" "),e("h3",{attrs:{id:"拦截-http-请求"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#拦截-http-请求","aria-hidden":"true"}},[t._v("#")]),t._v(" 拦截 HTTP 请求")]),t._v(" "),e("p",[t._v("说一下 Vite 实现的核心——拦截浏览器对模块的请求并返回处理后的结果。")]),t._v(" "),e("p",[t._v("起一个本地服务，打开的网页，浏览器发起的第一个请求自然是请求 localhost:xxxx/，这个请求发送到 Vite 后端之后经过静态资源服务器的处理，会进而请求到 /index.html，此时 Vite 就开始对这个请求做拦截和处理了。\n首先，index.html 里的源码是这样的：")]),t._v(" "),e("div",{staticClass:"language-js line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("div id"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"app"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("div"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("script type"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"module"')]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" createApp "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'vue'")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" App "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./App.vue'")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("createApp")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("App"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("mount")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#app'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("script"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br")])]),e("p",[t._v("但是在浏览器里它是这样的：\n"),e("img",{attrs:{src:a(329),alt:""}})]),t._v(" "),e("p",[e("code",[t._v("import { createApp } from 'vue' 换成了 import { createApp } from '/@modules/vue。")])]),t._v(" "),e("p",[t._v("平时我们写代码，如果不是引用相对路径的模块，而是引用 "),e("code",[t._v("node_modules")]),t._v(" 的模块，都是直接 "),e("code",[t._v("import xxx from 'xxx'")]),t._v("，由 Webpack 等工具来帮我们找这个模块的具体路径。但是浏览器不知道你项目里有 "),e("code",[t._v("node_modules")]),t._v("，它只能通过相对路径去寻找模块。")]),t._v(" "),e("p",[t._v("因此 Vite 在拦截的请求里，对直接引用 "),e("code",[t._v("node_modules")]),t._v(" 的模块都做了路径的替换，换成了"),e("code",[t._v("/@modules/")]),t._v(" 并返回回去。而后浏览器收到后，会发起对"),e("code",[t._v("/@modules/xxx")]),t._v("的请求，然后被 Vite 再次拦截，并由 Vite 内部去访问真正的模块，并将得到的内容再次做同样的处理后，返回给浏览器。")]),t._v(" "),e("p",[t._v("https://juejin.cn/post/6881078539756503047\nhttps://juejin.cn/post/6844904146915573773\nhttps://cn.vitejs.dev/guide/why.html")])])},[],!1,null,null,null);s.default=n.exports}}]);